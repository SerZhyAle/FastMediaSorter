Imports System.Windows.Forms
Imports System.IO
Imports System.Drawing
Imports System.Drawing.Drawing2D
Imports System.Threading.Tasks

Public Class Image_Panel_Form
    Inherits Form

    ' --- UI Controls and Constants ---
    Private imagePanel As FlowLayoutPanel
    Private Const PictureBoxSize As Integer = 80
    Private Const ResizeTimerInterval As Integer = 200

    ' --- State Management for Dynamic Loading ---
    Private allImageFiles As New List(Of String)()
    Private currentlyLoadedIndex As Integer = 0
    Private isLoading As Boolean = False
    Private resizeDebounceTimer As New System.Windows.Forms.Timer()
    ' --- New for selection and visible files ---
    Private visibleFiles As New List(Of String)() ' Files currently shown in PictureBoxes
    Private selectedIndices As New HashSet(Of Integer)() ' Indices of selected PictureBoxes

    Public Sub New()
        Me.Text = If(Is_Russian_Language, "Панель изображений", "Image Panel")
        Me.Size = New Drawing.Size(800, 600)

        imagePanel = New FlowLayoutPanel()
        With imagePanel
            .Dock = DockStyle.Fill
            .AutoScroll = True ' Use native scrollbar
            .FlowDirection = FlowDirection.LeftToRight
        End With
        Me.Controls.Add(imagePanel)

        AddHandler Me.Resize, AddressOf OnFormResize
        AddHandler Me.Shown, AddressOf OnFormShown
        AddHandler imagePanel.Paint, AddressOf OnPanelPaint
        resizeDebounceTimer.Interval = ResizeTimerInterval
        AddHandler resizeDebounceTimer.Tick, AddressOf OnResizeTimerTick
    End Sub

    Protected Overrides Sub OnLoad(e As EventArgs)
        MyBase.OnLoad(e)
        InitializeState()
    End Sub

    ' --- Event Handlers ---

    Private Sub OnFormShown(sender As Object, e As EventArgs)
        RemoveHandler Me.Shown, AddressOf OnFormShown
        FillVisibleAreaAsync()
    End Sub

    Private Sub OnFormResize(sender As Object, e As EventArgs)
        resizeDebounceTimer.Stop()
        resizeDebounceTimer.Start()
    End Sub

    Private Sub OnResizeTimerTick(sender As Object, e As EventArgs)
        resizeDebounceTimer.Stop()
        FillVisibleAreaAsync()
    End Sub

    Private Sub OnPanelPaint(sender As Object, e As PaintEventArgs)
        If isLoading OrElse Not imagePanel.VerticalScroll.Visible Then Return

        If imagePanel.VerticalScroll.Value >= (imagePanel.VerticalScroll.Maximum - imagePanel.VerticalScroll.LargeChange) Then
            LoadNextBatchAsync()
        End If
    End Sub

    ' --- Core Logic ---

    Private Sub InitializeState()
        For Each ctrl As Control In imagePanel.Controls
            ctrl.Dispose()
        Next
        imagePanel.Controls.Clear()
        allImageFiles.Clear()
        visibleFiles.Clear()
        selectedIndices.Clear()
        currentlyLoadedIndex = 0

        Dim current_Folder_Path As String = Main_Form.Current_Folder_Path
        If Not String.IsNullOrEmpty(current_Folder_Path) AndAlso Directory.Exists(current_Folder_Path) Then
            Dim extensions As String() = Main_Form.Image_File_Extensions
            allImageFiles = Directory.GetFiles(current_Folder_Path).Where(Function(f) extensions.Contains(Path.GetExtension(f).ToLower())).ToList()
        End If

        ' Start from Main_Form.Current_Image_File if set
        If Not String.IsNullOrEmpty(Main_Form.Current_Image_File) Then
            Dim idx = allImageFiles.IndexOf(Main_Form.Current_Image_File)
            If idx >= 0 Then currentlyLoadedIndex = idx
        End If
    End Sub

    Private Async Sub FillVisibleAreaAsync()
        While Not imagePanel.VerticalScroll.Visible AndAlso currentlyLoadedIndex < allImageFiles.Count
            If isLoading Then Return
            Await LoadNextBatchAsync()
            Await Task.Delay(10) ' Allow UI to process layout
        End While
    End Sub

    Private Async Function LoadNextBatchAsync() As Task
        If isLoading OrElse currentlyLoadedIndex >= allImageFiles.Count Then Return

        Try
            isLoading = True

            Dim cols = Math.Max(1, imagePanel.ClientSize.Width \ (PictureBoxSize + 6))
            Dim batchSize = cols * 2 ' Load two rows at a time

            Dim startIndex = currentlyLoadedIndex
            Dim endIndex = Math.Min(startIndex + batchSize - 1, allImageFiles.Count - 1)

            If startIndex > endIndex Then Return

            Dim tasks As New List(Of Task)()

            For i = startIndex To endIndex
                Dim filePath = allImageFiles(i)
                Dim pb = New PictureBox()
                With pb
                    .Width = PictureBoxSize
                    .Height = PictureBoxSize
                    .BorderStyle = BorderStyle.FixedSingle
                    .BackColor = Color.LightGray
                    .Tag = filePath
                End With
                AddHandler pb.Click, AddressOf OnPictureBoxClick
                imagePanel.Controls.Add(pb)
                visibleFiles.Add(filePath)

                tasks.Add(Task.Run(Sub()
                                       Dim thumbnail = CreateThumbnail(filePath, PictureBoxSize, PictureBoxSize)
                                       If Me.IsDisposed OrElse pb.IsDisposed OrElse CStr(pb.Tag) <> filePath Then Return

                                       If thumbnail IsNot Nothing Then
                                           pb.Invoke(New Action(Sub() pb.Image = thumbnail))
                                       Else
                                           pb.Invoke(New Action(Sub() pb.BackColor = Color.Red))
                                       End If
                                   End Sub))
            Next

            currentlyLoadedIndex = endIndex + 1
            Await Task.WhenAll(tasks)
        Finally
            isLoading = False
        End Try
    End Function

    ' --- Selection logic ---
    Private Sub OnPictureBoxClick(sender As Object, e As EventArgs)
        Dim pb = CType(sender, PictureBox)
        Dim idx = imagePanel.Controls.IndexOf(pb)
        If idx < 0 Then Return
        If ModifierKeys = Keys.Control Then
            If selectedIndices.Contains(idx) Then
                selectedIndices.Remove(idx)
                pb.BackColor = Color.LightGray
            Else
                selectedIndices.Add(idx)
                pb.BackColor = Color.CornflowerBlue
            End If
        ElseIf ModifierKeys = Keys.Shift AndAlso selectedIndices.Count > 0 Then
            Dim last = selectedIndices.Last()
            Dim range = If(idx > last, Enumerable.Range(last, idx - last + 1), Enumerable.Range(idx, last - idx + 1))
            For Each i In range
                selectedIndices.Add(i)
                CType(imagePanel.Controls(i), PictureBox).BackColor = Color.CornflowerBlue
            Next
        Else
            For Each i In selectedIndices.ToList()
                CType(imagePanel.Controls(i), PictureBox).BackColor = Color.LightGray
            Next
            selectedIndices.Clear()
            selectedIndices.Add(idx)
            pb.BackColor = Color.CornflowerBlue
        End If
    End Sub

    ' --- KeyDown for DELETE ---
    Protected Overrides Sub OnKeyDown(e As KeyEventArgs)
        MyBase.OnKeyDown(e)
        If e.KeyCode = Keys.Delete AndAlso selectedIndices.Count > 0 Then
            DeleteSelectedFilesAsync()
        End If
    End Sub

    Private Async Sub DeleteSelectedFilesAsync()
        Dim filesToDelete = selectedIndices.Select(Function(i) visibleFiles(i)).ToList()
        For Each file In filesToDelete
            Try
                File.Delete(file)
            Catch ex As Exception
                ' Optionally show error
            End Try
        Next
        InitializeState()
        Await Task.Delay(10)
        FillVisibleAreaAsync()
    End Sub

End Class