Imports System.Windows.Forms
Imports System.IO
Imports System.Drawing
Imports System.Drawing.Drawing2D
Imports System.Threading.Tasks

Public Class Image_Panel_Form
    Inherits Form

    ' --- UI Controls and Constants ---
    Private imagePanel As FlowLayoutPanel
    Private Const PictureBoxSize As Integer = 80
    Private Const ResizeTimerInterval As Integer = 200

    ' --- State Management ---
    Private allImageFiles As New List(Of String)()
    Private selectedPictureControls As New List(Of PictureBox)()
    Private currentlyLoadedIndex As Integer = 0
    Private isLoading As Boolean = False
    Private resizeDebounceTimer As New System.Windows.Forms.Timer()

    Public Sub New()
        Me.Text = If(Is_Russian_Language, "Панель изображений", "Image Panel")
        Me.Size = New Drawing.Size(800, 600)
        Me.KeyPreview = True ' To capture key presses on the form

        imagePanel = New FlowLayoutPanel()
        With imagePanel
            .Dock = DockStyle.Fill
            .AutoScroll = True
            .FlowDirection = FlowDirection.LeftToRight
        End With
        Me.Controls.Add(imagePanel)

        AddHandler Me.Resize, AddressOf OnFormResize
        AddHandler Me.Shown, AddressOf OnFormShown
        AddHandler Me.KeyDown, AddressOf OnFormKeyDown
        AddHandler imagePanel.Paint, AddressOf OnPanelPaint
        resizeDebounceTimer.Interval = ResizeTimerInterval
        AddHandler resizeDebounceTimer.Tick, AddressOf OnResizeTimerTick
    End Sub

    Protected Overrides Sub OnLoad(e As EventArgs)
        MyBase.OnLoad(e)
        InitializeState()
    End Sub

    ' --- Event Handlers ---

    Private Async Sub OnFormShown(sender As Object, e As EventArgs)
        RemoveHandler Me.Shown, AddressOf OnFormShown
        Dim targetFile = Main_Form.Current_Image_Path
        Dim targetPb As PictureBox = Nothing

        If String.IsNullOrEmpty(targetFile) OrElse Not allImageFiles.Contains(targetFile) Then
            FillVisibleAreaAsync()
            Return
        End If

        While targetPb Is Nothing AndAlso currentlyLoadedIndex < allImageFiles.Count
            If isLoading Then Await Task.Delay(50) : Continue While
            Await LoadNextBatchAsync()
            targetPb = imagePanel.Controls.OfType(Of PictureBox)().FirstOrDefault(Function(p) CStr(p.Tag) = targetFile)
        End While

        If targetPb IsNot Nothing Then
            imagePanel.ScrollControlIntoView(targetPb)
            ' Select the target picture box
            ClearSelection()
            AddToSelection(targetPb)
            UpdateSelectionVisuals()
        End If

        FillVisibleAreaAsync()
    End Sub

    Private Sub OnFormResize(sender As Object, e As EventArgs)
        resizeDebounceTimer.Stop()
        resizeDebounceTimer.Start()
    End Sub

    Private Sub OnResizeTimerTick(sender As Object, e As EventArgs)
        resizeDebounceTimer.Stop()
        FillVisibleAreaAsync()
    End Sub

    Private Sub OnPanelPaint(sender As Object, e As PaintEventArgs)
        If isLoading OrElse Not imagePanel.VerticalScroll.Visible Then Return
        If imagePanel.VerticalScroll.Value >= (imagePanel.VerticalScroll.Maximum - imagePanel.VerticalScroll.LargeChange) Then
            LoadNextBatchAsync()
        End If
    End Sub

    Private Sub OnPictureBoxClick(sender As Object, e As EventArgs)
        Dim pb = CType(sender, PictureBox)
        If (Control.ModifierKeys And Keys.Control) = Keys.Control Then
            ToggleSelection(pb)
        Else
            ClearSelection()
            AddToSelection(pb)
        End If
        UpdateSelectionVisuals()
    End Sub

    Private Sub OnPictureBoxPaint(sender As Object, e As PaintEventArgs)
        Dim pb = CType(sender, PictureBox)
        If selectedPictureControls.Contains(pb) Then
            Dim borderColor As Color = Color.DeepSkyBlue ' Or any color you prefer
            Dim borderWidth As Integer = 3
            Using pen As New Pen(borderColor, borderWidth)
                pen.Alignment = Drawing2D.PenAlignment.Inset
                e.Graphics.DrawRectangle(pen, 0, 0, pb.Width - 1, pb.Height - 1)
            End Using
        End If
    End Sub

    Private Sub OnFormKeyDown(sender As Object, e As KeyEventArgs)
        If e.KeyCode = Keys.Delete AndAlso selectedPictureControls.Count > 0 Then
            e.Handled = True
            DeleteSelectedFiles()
        End If
    End Sub

    ' --- Selection and Deletion Logic ---

    Private Sub AddToSelection(pb As PictureBox)
        If Not selectedPictureControls.Contains(pb) Then
            selectedPictureControls.Add(pb)
        End If
    End Sub

    Private Sub RemoveFromSelection(pb As PictureBox)
        If selectedPictureControls.Contains(pb) Then
            selectedPictureControls.Remove(pb)
        End If
    End Sub

    Private Sub ToggleSelection(pb As PictureBox)
        If selectedPictureControls.Contains(pb) Then
            RemoveFromSelection(pb)
        Else
            AddToSelection(pb)
        End If
    End Sub

    Private Sub ClearSelection()
        selectedPictureControls.Clear()
    End Sub

    Private Sub UpdateSelectionVisuals()
        For Each pb As PictureBox In imagePanel.Controls.OfType(Of PictureBox)()
            pb.BackColor = If(selectedPictureControls.Contains(pb), Color.White, Color.LightGray)
            pb.Invalidate() ' Force redraw for border
        Next
    End Sub

    Private Sub DeleteSelectedFiles()
        Dim filesToDelete = selectedPictureControls.Select(Function(pb) CStr(pb.Tag)).ToList()

        Dim confirmMsg = If(Is_Russian_Language, $"Вы уверены, что хотите безвозвратно удалить {filesToDelete.Count} файл(ов)?",
                            $"Are you sure you want to permanently delete {filesToDelete.Count} file(s)?")

        If MessageBox.Show(confirmMsg, If(Is_Russian_Language, "Подтверждение удаления", "Deletion.."), MessageBoxButtons.YesNo, MessageBoxIcon.Warning) <> DialogResult.Yes Then Return

        For Each pbToDelete In selectedPictureControls
            Dim filePath = CStr(pbToDelete.Tag)
            Try
                File.Delete(filePath)
                allImageFiles.Remove(filePath)
                imagePanel.Controls.Remove(pbToDelete)
                pbToDelete.Dispose()
            Catch ex As Exception
                MessageBox.Show(If(Is_Russian_Language, "Не удалось удалить файл: ", "Fail to delete file:") & filePath & vbCrLf & ex.Message, If(Is_Russian_Language, "Ошибка", "Error"), MessageBoxButtons.OK, MessageBoxIcon.Error)
            End Try
        Next
        ClearSelection()
    End Sub

    ' --- Core Loading Logic ---

    Private Sub InitializeState()
        ClearSelection()
        imagePanel.Controls.Clear()
        allImageFiles.Clear()
        currentlyLoadedIndex = 0

        Dim current_Folder_Path As String = Main_Form.Current_Folder_Path
        If Not String.IsNullOrEmpty(current_Folder_Path) AndAlso Directory.Exists(current_Folder_Path) Then
            Dim extensions As String() = Main_Form.Image_File_Extensions
            allImageFiles = Directory.GetFiles(current_Folder_Path).Where(Function(f) extensions.Contains(Path.GetExtension(f).ToLower())).ToList()
        End If
    End Sub

    Private Async Sub FillVisibleAreaAsync()
        While Not imagePanel.VerticalScroll.Visible AndAlso currentlyLoadedIndex < allImageFiles.Count
            If isLoading Then Return
            Await LoadNextBatchAsync()
            Await Task.Delay(10)
        End While
    End Sub

    Private Async Function LoadNextBatchAsync() As Task
        If isLoading OrElse currentlyLoadedIndex >= allImageFiles.Count Then Return

        Try
            isLoading = True
            Dim cols = Math.Max(1, imagePanel.ClientSize.Width \ (PictureBoxSize + 6))
            Dim batchSize = cols * 2
            Dim startIndex = currentlyLoadedIndex
            Dim endIndex = Math.Min(startIndex + batchSize - 1, allImageFiles.Count - 1)
            If startIndex > endIndex Then Return

            Dim tasks As New List(Of Task)()
            For i = startIndex To endIndex
                Dim filePath = allImageFiles(i)
                Dim pb = New PictureBox()
                With pb
                    .Width = PictureBoxSize
                    .Height = PictureBoxSize
                    .BorderStyle = BorderStyle.FixedSingle
                    .BackColor = Color.LightGray
                    .Tag = filePath
                End With
                AddHandler pb.Click, AddressOf OnPictureBoxClick
                AddHandler pb.Paint, AddressOf OnPictureBoxPaint
                imagePanel.Controls.Add(pb)
                tasks.Add(Task.Run(Sub()
                                       Dim thumbnail = CreateThumbnail(filePath, PictureBoxSize, PictureBoxSize)
                                       If Me.IsDisposed OrElse pb.IsDisposed OrElse CStr(pb.Tag) <> filePath Then Return
                                       If thumbnail IsNot Nothing Then
                                           pb.Invoke(New Action(Sub() pb.Image = thumbnail))
                                       Else
                                           pb.Invoke(New Action(Sub() pb.BackColor = Color.Red))
                                       End If
                                   End Sub))
            Next
            currentlyLoadedIndex = endIndex + 1
            Await Task.WhenAll(tasks)
        Finally
            isLoading = False
        End Try
    End Function

    Private Function CreateThumbnail(imagePath As String, width As Integer, height As Integer) As Image
        Try
            Using ms As New MemoryStream(File.ReadAllBytes(imagePath))
                Using originalImage As Image = Image.FromStream(ms)
                    Dim sourceWidth = originalImage.Width
                    Dim sourceHeight = originalImage.Height
                    Dim nPercentW = CSng(width) / CSng(sourceWidth)
                    Dim nPercentH = CSng(height) / CSng(sourceHeight)
                    Dim nPercent = Math.Min(nPercentW, nPercentH)
                    Dim destWidth = CInt(sourceWidth * nPercent)
                    Dim destHeight = CInt(sourceHeight * nPercent)
                    Dim destX = (width - destWidth) \ 2
                    Dim destY = (height - destHeight) \ 2
                    Dim bmPhoto As New Bitmap(width, height, Imaging.PixelFormat.Format32bppArgb)
                    bmPhoto.SetResolution(originalImage.HorizontalResolution, originalImage.VerticalResolution)
                    Using grPhoto As Graphics = Graphics.FromImage(bmPhoto)
                        grPhoto.Clear(Color.LightGray)
                        grPhoto.InterpolationMode = InterpolationMode.Low
                        grPhoto.DrawImage(originalImage, New Rectangle(destX, destY, destWidth, destHeight), New Rectangle(0, 0, sourceWidth, sourceHeight), GraphicsUnit.Pixel)
                    End Using
                    Return bmPhoto
                End Using
            End Using
        Catch ex As Exception
            Return Nothing
        End Try
    End Function
End Class